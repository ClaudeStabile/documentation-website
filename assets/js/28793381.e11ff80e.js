"use strict";(self.webpackChunknewdoc=self.webpackChunknewdoc||[]).push([[843],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=i.createContext({}),s=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),u=a,g=p["".concat(d,".").concat(u)]||p[u]||m[u]||l;return n?i.createElement(g,r(r({ref:t},c),{},{components:n})):i.createElement(g,r({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=p;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},54:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const l={sidebar_label:"Declare intentions and command trigger phrases",sidebar_position:2},r="Intentions and entitites usage",o={unversionedId:"developpers/agent/skills/devguide/format",id:"developpers/agent/skills/devguide/format",title:"Intentions and entitites usage",description:"This section explains more deeply how to write manifest markdown files for intents and command phrases within your custom skills.",source:"@site/docs/developpers/agent/skills/devguide/format.md",sourceDirName:"developpers/agent/skills/devguide",slug:"/developpers/agent/skills/devguide/format",permalink:"/docs/developpers/agent/skills/devguide/format",draft:!1,editUrl:"https://github.com/linto-ai/documentation-website/tree/source/docs/developpers/agent/skills/devguide/format.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Declare intentions and command trigger phrases",sidebar_position:2},sidebar:"devSidebar",previous:{title:"Code your actions",permalink:"/docs/developpers/agent/skills/devguide/make_my_skills"},next:{title:"Deploy a skill",permalink:"/docs/developpers/agent/skills/devguide/install_my_skills"}},d={},s=[{value:"Model live retraining",id:"model-live-retraining",level:2},{value:"Command",id:"command",level:2},{value:"Intent format",id:"intent-format",level:3},{value:"Declare intent",id:"declare-intent",level:4},{value:"Basic command",id:"basic-command",level:4},{value:"Multiple language command",id:"multiple-language-command",level:4},{value:"Multiple intent command",id:"multiple-intent-command",level:4},{value:"Entity format",id:"entity-format",level:3},{value:"Defined entity",id:"defined-entity",level:4},{value:"Dictionary entity",id:"dictionary-entity",level:4},{value:"Dictionary",id:"dictionary",level:2},{value:"Format Example",id:"format-example",level:3},{value:"Simple dictionary",id:"simple-dictionary",level:4},{value:"Multiple language dictionary",id:"multiple-language-dictionary",level:4},{value:"Interlanguages of two language",id:"interlanguages-of-two-language",level:4},{value:"Duckling",id:"duckling",level:2},{value:"Duckling entity",id:"duckling-entity",level:3},{value:"Wired example",id:"wired-example",level:2}],c={toc:s};function m(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intentions-and-entitites-usage"},"Intentions and entitites usage"),(0,a.kt)("p",null,"This section explains more deeply how to write manifest markdown files for intents and command phrases within your custom skills."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},'When some text declaration is added to a LinTO skill, wheter editting the manifest initialy or by customizing it within Node-RED interface, the entire Node-RED workflow needs to get updated (using "Save and Deploy" LInTO-Admin feature). Once the application is redeployed, LinTO inner mechanics triggers a lot of operations on your server. Those operation essentialy consists of :'),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Training embeded Natural Language Understanding server - ",(0,a.kt)("a",{parentName:"li",href:"https://doc.tock.ai/fr/"},"Voyage SNCF's TOCK - The Open Conversation Kit")),(0,a.kt)("li",{parentName:"ul"},"Adding custom vocabulary to the ",(0,a.kt)("strong",{parentName:"li"},"LinTO Platform transcription service currently in use by the edited workflow for handling voice commands")," - This operation rebuilds the Language Model for automatic speech recognition and re-deploys the transcription service"))),(0,a.kt)("h2",{id:"model-live-retraining"},"Model live retraining"),(0,a.kt)("p",null,"A given LinTO application can use multiple ",(0,a.kt)("strong",{parentName:"p"},"transcription services")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Large vocabulary transcription services ",(0,a.kt)("strong",{parentName:"p"},"does not")," get populated with this mechanics. They uses very large language models that are intended for dictation or spontaneous speech, not simple ",(0,a.kt)("strong",{parentName:"p"},"voice command")," like the trigger phrases for vocal assistants.\nA given LinTO application can use multiple services with large vocabulary or specific commands... Therefore the LinTO client can send vocal commands, sequenced by Wake-words / Silence detection, or initiate a streaming session towards a large-vocabulary transcription service")),(0,a.kt)("p",null,"As stated in the server/post-install docs, you shall use a transcription service with an empty Language Model as the Language Model will entirely get populated by ",(0,a.kt)("strong",{parentName:"p"},"skills declared intentions, example phrases and named entitites")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"retraining",src:n(5320).Z,width:"891",height:"283"})),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("p",null,"A command is a string with one goal, trigger the desired skill when the sentence is detected by the NLU. Only the trained sentence will be detected. So a  skill need to provide his own command for STT (transcription) and NLU(intent). "),(0,a.kt)("p",null,"To add a command for a skill, you will need to double-click on a linto-skill-node in RED and edit the ",(0,a.kt)("strong",{parentName:"p"},"Command")," block"),(0,a.kt)("h3",{id:"intent-format"},"Intent format"),(0,a.kt)("p",null,"Here the supported intent format (all example can be mixed between them)"),(0,a.kt)("h4",{id:"declare-intent"},"Declare intent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"  ##intent|intent_name|intent_language\n")),(0,a.kt)("h4",{id:"basic-command"},"Basic command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|greeting|en\n- farewell\n- goodbye\n")),(0,a.kt)("h4",{id:"multiple-language-command"},"Multiple language command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|goodbye|en\n- farewell\n- goodbye\n##intent|goodbye|fr\n- \xe0 bient\xf4t\n- au revoir\n")),(0,a.kt)("h4",{id:"multiple-intent-command"},"Multiple intent command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|my_first_intent_greeting|en\n- hello\n- greeting\n##intent|my_second_intent_goodbye|en\n- farewell\n- goodbye\n")),(0,a.kt)("h3",{id:"entity-format"},"Entity format"),(0,a.kt)("p",null,"Here the supported format for entity (in command or by dictionary)"),(0,a.kt)("h4",{id:"defined-entity"},"Defined entity"),(0,a.kt)("p",null,"Entity can be define in command : ",(0,a.kt)("inlineCode",{parentName:"p"},"[words](entity)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|weather|en\n- what's the weather in [new york](location)\n- what's the weather in [new york](location) [tomorow](date)\n")),(0,a.kt)("h4",{id:"dictionary-entity"},"Dictionary entity"),(0,a.kt)("p",null,"Dictionary entity need to be wired to the desired skill. It allow to load all entity from the dictionary to the skill\nIn the command the syntaxe is ",(0,a.kt)("inlineCode",{parentName:"p"},"#dictionary_name")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|weather|en\n- what's the weather in #location\n- what's the weather in #location #date\n")),(0,a.kt)("h2",{id:"dictionary"},"Dictionary"),(0,a.kt)("p",null,"A dictionary allow to group a list of words related to the same entity. A dictionary is reusable for multiple skill. It allow to reduce the amount entity declaration from a skill command."),(0,a.kt)("p",null,"To add a dictionary you need to double-click on a dictionary-node in RED and edit the ",(0,a.kt)("strong",{parentName:"p"},"Data")," block."),(0,a.kt)("h3",{id:"format-example"},"Format Example"),(0,a.kt)("p",null,"Dictionary name is used has the node name."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"/docs/lexical_seeding/dictionary_name.png",alt:"dictionary_name"})),(0,a.kt)("p",null,"Here the supported format for a dictionary (note that all example bellow can be mixed between them)"),(0,a.kt)("h4",{id:"simple-dictionary"},"Simple dictionary"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##en\nblue\nred\n")),(0,a.kt)("h4",{id:"multiple-language-dictionary"},"Multiple language dictionary"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##en\nblue\nred\n##fr\nbleu\nrouge\n")),(0,a.kt)("h4",{id:"interlanguages-of-two-language"},"Interlanguages of two language"),(0,a.kt)("p",null,"In case you want to use interlanguage you will need to write the phonetic desired of the words ",(0,a.kt)("inlineCode",{parentName:"p"},"words|phonetic_words")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##fr\nmeeting|miting\nsoftware|sauftware\nafterwork|afeuterework\nwords|phonetic_words\n")),(0,a.kt)("h2",{id:"duckling"},"Duckling"),(0,a.kt)("h3",{id:"duckling-entity"},"Duckling entity"),(0,a.kt)("p",null,"Entity support duckling. Duckling will add entity information as structured data.\nThe supported duckling entity :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:amount-of-money")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:volume")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:temperature")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:datetime")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:ordinal")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:duration")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:url")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:email")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:phone-number")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duckling:distance")," ")),(0,a.kt)("p",null,"To use an duckling entity, just declare it like a normal entity :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"##intent|date|en\n- what is [tomorrow](datetime) day\n- what is the date of #datetime\n")),(0,a.kt)("h2",{id:"wired-example"},"Wired example"),(0,a.kt)("p",null,"To use a dictionary, you need to link it to the desired skill."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"/docs/lexical_seeding/skill_red.png",alt:"dictionary_name"})),(0,a.kt)("p",null,"We can see that a skill don't require a dictionary. A dictionary can be used for one or multiple skill."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"linto-skill-weather use the dictionary country and city"),(0,a.kt)("li",{parentName:"ul"},"linto-skill-pollution use the dictionary city"),(0,a.kt)("li",{parentName:"ul"},"linto-skill-welcome don't use any dictionary")))}m.isMDXComponent=!0},5320:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/languagemodeling-9fc90fff6e8bc56a40a4c6a05878b40e.png"}}]);