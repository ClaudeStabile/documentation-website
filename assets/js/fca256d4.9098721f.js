"use strict";(self.webpackChunknewdoc=self.webpackChunknewdoc||[]).push([[9601],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>N});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},d=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),k=s(a),N=n,c=k["".concat(p,".").concat(N)]||k[N]||m[N]||l;return a?r.createElement(c,o(o({ref:e},d),{},{components:a})):r.createElement(c,o({ref:e},d))}));function N(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,o=new Array(l);o[0]=k;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:n,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},4395:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:2},o="Deploy LinTO Platform Server",i={unversionedId:"developpers/agent/server/stack_deploy",id:"developpers/agent/server/stack_deploy",title:"Deploy LinTO Platform Server",description:"LinTO Platform Server stack is meant to get deployed on a Docker Swarm cluster. Please read thouroughly the infrastructure setup guide and the following documentation BEFORE you run the startup script.",source:"@site/docs/developpers/agent/server/stack_deploy.md",sourceDirName:"developpers/agent/server",slug:"/developpers/agent/server/stack_deploy",permalink:"/docs/developpers/agent/server/stack_deploy",draft:!1,editUrl:"https://github.com/linto-ai/documentation-website/tree/source/docs/developpers/agent/server/stack_deploy.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"devSidebar",previous:{title:"Prepare infrastructure",permalink:"/docs/developpers/agent/server/infrastructure"},next:{title:"Post install walkthrough",permalink:"/docs/developpers/agent/server/post_install/"}},p={},s=[{value:"LinTO Platform Server Stack deployment tool",id:"linto-platform-server-stack-deployment-tool",level:2},{value:"Repo&#39;s structure explained",id:"repos-structure-explained",level:3},{value:"LinTO server components - A whole stack of services",id:"linto-server-components---a-whole-stack-of-services",level:2},{value:"Docker Swarm Services configured and deployed by this tool",id:"docker-swarm-services-configured-and-deployed-by-this-tool",level:2},{value:"Web interfaces",id:"web-interfaces",level:2},{value:"Ready ? Let&#39;s deploy LinTO Platform !",id:"ready--lets-deploy-linto-platform-",level:2},{value:"LinTO Platform stack on a local network",id:"linto-platform-stack-on-a-local-network",level:3},{value:"LinTO Platform stack on a publicly available Web Server",id:"linto-platform-stack-on-a-publicly-available-web-server",level:3},{value:"Start and stop the stack",id:"start-and-stop-the-stack",level:3},{value:"Environement Variable Configuration",id:"environement-variable-configuration",level:2},{value:"Final words",id:"final-words",level:2}],d={toc:s};function m(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deploy-linto-platform-server"},"Deploy LinTO Platform Server"),(0,n.kt)("admonition",{title:"Just make sure...",type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"LinTO Platform Server stack is meant to get deployed on a ",(0,n.kt)("strong",{parentName:"p"},"Docker Swarm cluster"),". Please read thouroughly the ",(0,n.kt)("a",{parentName:"p",href:"/docs/developpers/agent/server/infrastructure"},"infrastructure setup guide")," and the following documentation ",(0,n.kt)("strong",{parentName:"p"},"BEFORE")," you run the startup script.")),(0,n.kt)("p",null,"If you fancy using kubernetes, or other containers orchestration tools, you might adapt this proposal for your needs... Won't be too much of a hassle as this stack relies mainly on Traefik edge-router which can be deployed as an Ingress controler for K8s."),(0,n.kt)("p",null,"The benefit we try to raise by chosing Docker Swarm is to stick as much as we can to standard Docker / Docker Compose deployements. We hope that it would be more convinient for LinTO contributors, hackers and makers that wants to quickly deploy LinTO's tooling. Read more about those choices ",(0,n.kt)("a",{parentName:"p",href:"https://dockerswarm.rocks/"},"here")),(0,n.kt)("h2",{id:"linto-platform-server-stack-deployment-tool"},"LinTO Platform Server Stack deployment tool"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The tool is available here, ",(0,n.kt)("a",{parentName:"strong",href:"https://github.com/linto-ai/linto-platform-stack"},"linto-platform-stack"),". Please, clone this on a ",(0,n.kt)("em",{parentName:"strong"},"manager node")," of your Docker Swarm cluster !")),(0,n.kt)("p",null,"This tool ",(0,n.kt)("em",{parentName:"p"},"tries")," to solve all the burden of  deploying LinTO's server components with our proposed Docker images (quite a complicated task otherwise...)"),(0,n.kt)("p",null,"It mainly consists of a bash script, ",(0,n.kt)("inlineCode",{parentName:"p"},"start.sh"),", that feeds Docker Swarm with the provided YML Docker Compose files. The script will also generate files in a shared folder made available on every node of the swarm cluster. Almost every user setups are wrapped in a single environement variable declarative file."),(0,n.kt)("p",null,"The whole point here is to rationalize all your deployement in two quick steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Copy the template : ",(0,n.kt)("inlineCode",{parentName:"li"},"cp dockerenv_template .dockerenv")),(0,n.kt)("li",{parentName:"ol"},"Configure the service stack options by filling-up all the mandatory environement variables in ",(0,n.kt)("inlineCode",{parentName:"li"},".dockerenv")),(0,n.kt)("li",{parentName:"ol"},"Run the ",(0,n.kt)("inlineCode",{parentName:"li"},"start.sh")," script on a manager node of your cluster")),(0,n.kt)("p",null,"Simple, isn't it ?"),(0,n.kt)("p",null,"Note: ",(0,n.kt)("inlineCode",{parentName:"p"},"start.sh [-- command args]")," have command arguments"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"    -f | --force-pull     Force all image to be pull\n    -r | --restart        Hard restart of the stack\n")),(0,n.kt)("h3",{id:"repos-structure-explained"},"Repo's structure explained"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"linto-platform-stack\n\u251c\u2500\u2500 config\n\u2502\xa0\xa0 \u251c\u2500\u2500 bls                                             # Node-Red seeds\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 flowsStorage.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 mongoseeds                                      # MongoDB user creation\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 admin-users.js\n\u2502\xa0\xa0 \u251c\u2500\u2500 mosquitto                                       # Mosquitto MQTT broker parameters\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 docker-entrypoint.sh\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 mosquitto.conf\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 mosquitto_nologin.conf\n\u2502\xa0\xa0 \u251c\u2500\u2500 servicemanager                                  # linto-stt-service-manager inits\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 init.js\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 swagger.yml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 user.js\n\u2502\xa0\xa0 \u251c\u2500\u2500 tock                                            # Tock routing overrides\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 scripts\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 admin-web-entrypoint.sh\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 setup.sh\n\u2502\xa0\xa0 \u2514\u2500\u2500 traefik                                         # Traefik dynamic configuration files. All in this folder gets loaded when Traefik starts\n\u2502\xa0\xa0     \u251c\u2500\u2500 http-auth.toml\n\u2502\xa0\xa0     \u251c\u2500\u2500 ssl-redirect.toml\n\u2502\xa0\xa0     \u251c\u2500\u2500 stt-manager-path.toml\n\u2502\xa0\xa0     \u2514\u2500\u2500 tock-path.toml\n\u251c\u2500\u2500 devcerts                                            # Put here your cert.pem and key.pem for SSL termination\n\u2502\xa0\xa0 \u251c\u2500\u2500 cert.pem\n\u2502\xa0\xa0 \u2514\u2500\u2500 key.pem\n\u251c\u2500\u2500 docs                                                # This doc\n\u2502\xa0\xa0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 optional-stack-files                                # Some tools that you might start on your docker cluster\n\u2502\xa0\xa0 \u251c\u2500\u2500 monitoring_stack.yml\n\u2502\xa0\xa0 \u2514\u2500\u2500 network_tool.yml\n\u251c\u2500\u2500 scripts                                             # LinTO Platform backup and restore tools\n\u2502\xa0\xa0 \u251c\u2500\u2500 bls_backup.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 bls_restore.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 db_backup.sh\n\u2502\xa0\xa0 \u251c\u2500\u2500 db_restore.sh\n\u2502\xa0\xa0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 stack-files                                         # Service declaration\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-docker-visualizer.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-edge-router.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-mongo-migration.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-mqtt-broker.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-admin.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-bls.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-mongo.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-overwatch.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-redis.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 linto-platform-stt-service-manager.yml\n\u2502\xa0\xa0 \u2514\u2500\u2500 linto-platform-tock.yml\n\u2514\u2500\u2500 start.sh                                            # Startup script for the whole stack\n")),(0,n.kt)("p",null,"NOTE : The tool's repository has to get cloned on a ",(0,n.kt)("strong",{parentName:"p"},"manager node")," of your Docker Swarm cluster as running the ",(0,n.kt)("inlineCode",{parentName:"p"},"start.sh")," script should only happen in a manager node of your cluster. "),(0,n.kt)("h2",{id:"linto-server-components---a-whole-stack-of-services"},"LinTO server components - A whole stack of services"),(0,n.kt)("p",null,"LinTO Platform pre-compiled Docker images for Linux docker orchestrated infrastructures are available in our Docker Hub registry. ",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/lintoai/"},"LinTO's DockerHub")),(0,n.kt)("p",null,"NOTE : Our deployments currently uses Debian GNU/Linux 10 (buster) machines with Docker Swarm version 19.03.8"),(0,n.kt)("p",null,"Every Docker image available from the hub is compiled by us from our corresponding GitHub repository with a Jenkins CI task."),(0,n.kt)("p",null,"i.e : ",(0,n.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/lintoai/linto-platform-admin"},"linto-platform-admin docker image")," is built upon ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/linto-ai/linto-platform-admin"},"linto-platform-admin source repository")),(0,n.kt)("h2",{id:"docker-swarm-services-configured-and-deployed-by-this-tool"},"Docker Swarm Services configured and deployed by this tool"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Services"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Vendor"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-edge-router")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Ingress service for your LinTO platform."),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://docs.traefik.io/v2.2/"},"Traefik 2+"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-docker-visualizer")),(0,n.kt)("td",{parentName:"tr",align:"left"},"A quick monitor of your Docker Swarm Cluster"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://hub.docker.com/r/dockersamples/visualizer"},"dockersamples/vizualizer"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-mqtt-broker")),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT server for LinTO clients connectivity"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://hub.docker.com/_/eclipse-mosquitto"},"eclipse-mosquitto"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-redis")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Web servers sessions backend"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://hub.docker.com/_/redis"},"redis"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-nlp-api"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-nlu-web"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-mongo"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-mongo-setup"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-build_worker"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-tock-duckling")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The Open Conversation Kit - LinTO's server-side NLU Engine"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://github.com/theopenconversationkit/tock"},"Voyage SNCF's Tock"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-mongo"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-mongodb-migration")),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDB Datatabase and migrations, stores most of LinTO Platform's business logic"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://hub.docker.com/_/mongo"},"MongoDB"),", ",(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-mongodb-migration"},"linto-platform-mongodb-migration"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-stt-service-manager"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-stt-service-manager-mongodb")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Web API that abstracts the cluster's API in order to spawn service instances of Speech To Text transcription workers"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://github.com/theopenconversationkit/tock"},"MongoDB"),", ",(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-stt-service-manager"},"linto-platform-stt-service-manager"),", ",(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-stt-standalone-worker"},"linto-platform-stt-standalone-worker"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-admin")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The main web interface of the LinTO Platform. Monitor your fleet of voice-enabled endpoints, create workflows, deploy skills..."),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-admin"},"linto-platform-admin"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-overwatch")),(0,n.kt)("td",{parentName:"tr",align:"left"},"LinTO Platform's watchtower, provides authentication, persists connected clients MQTT transactions..."),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-overwatch"},"linto-platform-overwatch"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-bls")),(0,n.kt)("td",{parentName:"tr",align:"left"},"BLS stands for Business Logic Server, this is mainly a wrapper for Node-RED. This service is the server-side runtime that executes LinTO skills and actions"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"https://github.com/linto-ai/linto-platform-business-logic-server"},"linto-platform-bls"),", ",(0,n.kt)("a",{parentName:"td",href:"https://nodered.org/"},"IBM's Node-RED"))))),(0,n.kt)("p",null,"NOTE : Some services are persistant while some others, like database migrations, will fire once when the stack is started and then stop gracefuly."),(0,n.kt)("p",null,"NOTE : Some services are bound (constrained) to specific nodes in your cluster, we therefore might use specific docker labels attached to cluster nodes ( i.e : ",(0,n.kt)("inlineCode",{parentName:"p"},"ip=ingress")," label described further in this documentation). "),(0,n.kt)("p",null,"NOTE : Mongo DB databases volumes are explicitly bound to the cluster manager node, this is our default setup as we want to prevent database file getting sharded on the cluster shared volume. In a production setup you might edit the corresponding YML compose files and invent your own node labels to deploy the databases wherever you want to."),(0,n.kt)("h2",{id:"web-interfaces"},"Web interfaces"),(0,n.kt)("p",null,"Once deployed, some services provides web interfaces to start interacting with the platform."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Services"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Purpose"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Route"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Protected"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-edge-router")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Traefik Dashboard"),(0,n.kt)("td",{parentName:"tr",align:"left"},"http(s)://LINTO_STACK_DOMAIN:",(0,n.kt)("inlineCode",{parentName:"td"},"4480:4443"),"/dashboard/#/"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-docker-visualizer")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Cluster Vizualizer Dashboard"),(0,n.kt)("td",{parentName:"tr",align:"left"},"http(s)://LINTO_STACK_DOMAIN/viz/"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-admin")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The platform's main web Interface"),(0,n.kt)("td",{parentName:"tr",align:"left"},"http(s)://LINTO_STACK_DOMAIN/"),(0,n.kt)("td",{parentName:"tr",align:"left"},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"linto-platform-stt-service-manager")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swagger client to start spawning Speech To text services"),(0,n.kt)("td",{parentName:"tr",align:"left"},"http(s)://LINTO_STACK_DOMAIN/stt-manager/api-doc"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Yes")))),(0,n.kt)("p",null,"NOTE : ",(0,n.kt)("strong",{parentName:"p"},"Protected")," column refers to the ",(0,n.kt)("inlineCode",{parentName:"p"},"LINTO_STACK_HTTP_USE_AUTH")," environement variable. If set to true, the corresponding route will get protected with an HTTP basic auth middleware. This is useful for production as you don't want these routes publicly available."),(0,n.kt)("p",null,"NOTE : Some port variations appears in the ",(0,n.kt)("inlineCode",{parentName:"p"},"linto-edge-router")," dashboard route and relates to your choice for SSL termination. This choice is set up by the ",(0,n.kt)("inlineCode",{parentName:"p"},"LINTO_STACK_USE_SSL")," environement variable. This weird thingy is due to a Traefik limitation as the dashboard can't benefit from a base-path routing."),(0,n.kt)("p",null,"NOTE : ",(0,n.kt)("inlineCode",{parentName:"p"},"linto-platform-admin")," Web interface will propose links to other Web interfaces (node Red, Tock...)"),(0,n.kt)("h2",{id:"ready--lets-deploy-linto-platform-"},"Ready ? Let's deploy LinTO Platform !"),(0,n.kt)("p",null,"Identify and target the cluster node that will receive the inbound trafic."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"On a manager node, firstly list nodes and check hostnames :")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker node ls\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Add this specific label :")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker node update --label-add ip=ingress {Hostname_Of_The_Node_In_Your_Swarm_Cluster}\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Create a Docker Swarm local network to enable communication between services ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker network create \\\n    -d overlay \\\n    --attachable \\\n    linto-net\n")),(0,n.kt)("h3",{id:"linto-platform-stack-on-a-local-network"},"LinTO Platform stack on a local network"),(0,n.kt)("p",null,"You might choose to start the stack on your Linux Laptop right ahead. As we want you to also benefit from SSL termination when thoroughly testing the platform without a costly server deployment, we suggest you to use a self signed certificate :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Check this splendid tool : ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/FiloSottile/mkcert"},"MkCert")," and install it"),(0,n.kt)("li",{parentName:"ol"},"Generate self-signed certs for the chosen ",(0,n.kt)("inlineCode",{parentName:"li"},"LINTO_STACK_DOMAIN"),"\ni.e :")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'mkcert "mysuperlintostack.com"\n')),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Move the cert and key .pem file to the ",(0,n.kt)("inlineCode",{parentName:"li"},"devcerts")," folder of this repo. Name it ",(0,n.kt)("inlineCode",{parentName:"li"},"cert.pem")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"key.pem")),(0,n.kt)("li",{parentName:"ol"},"Update your /etc/hosts accordingly to the chosen domain (or use some dns resolver like dnsmasq)"),(0,n.kt)("li",{parentName:"ol"},"configure you local network DNS to resolve ",(0,n.kt)("inlineCode",{parentName:"li"},"LINTO_STACK_DOMAIN")," if you want to connect LinTO clients to the local LinTO Platform.")),(0,n.kt)("p",null,"You shall now benefit from a 100% SSL experience on your browser."),(0,n.kt)("h3",{id:"linto-platform-stack-on-a-publicly-available-web-server"},"LinTO Platform stack on a publicly available Web Server"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"LINTO_STACK_USE_ACME")," paired with ",(0,n.kt)("inlineCode",{parentName:"p"},"LINTO_STACK_USE_SSL")," environement variables, once set to true, will handle Let's encrypt transactions for you."),(0,n.kt)("p",null,"If you want to benefit from a free ACME SSL certificate issued by Let's Encrypt, simply set this vars to true and don't forget, at least, to point your DNS provider towards the external public IP of your cluster node that has the ",(0,n.kt)("inlineCode",{parentName:"p"},"ip=ingress")," (use an A record maybe ?)"),(0,n.kt)("p",null,"If you don't want to use Let's Encrypt, you shall of course bind-mount the SSL certificates you already own in the ",(0,n.kt)("inlineCode",{parentName:"p"},"linto-edge-router")," service before deploying the stack."),(0,n.kt)("h3",{id:"start-and-stop-the-stack"},"Start and stop the stack"),(0,n.kt)("p",null,"Once all environement variables configured in ",(0,n.kt)("inlineCode",{parentName:"p"},".dockerenv")," (double check that), simply invoke the ",(0,n.kt)("inlineCode",{parentName:"p"},"start.sh")," script on a manager node of your swarm cluster.\nThis will create a Docker stack named ",(0,n.kt)("inlineCode",{parentName:"p"},"linto_stack")),(0,n.kt)("p",null,"NOTE : All Docker services we described will get prefixed with this."),(0,n.kt)("p",null,"If you want to shutdown the stack, simply use Docker commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker stack rm linto_stack\n")),(0,n.kt)("p",null,"If you want to update services, you might simply reinvoke the ",(0,n.kt)("inlineCode",{parentName:"p"},"start.sh")," script"),(0,n.kt)("h2",{id:"environement-variable-configuration"},"Environement Variable Configuration"),(0,n.kt)("p",null,"NOTE : All of this is set up in the declarative hidden file ",(0,n.kt)("inlineCode",{parentName:"p"},".dockerenv")," at the root of the ",(0,n.kt)("inlineCode",{parentName:"p"},"linto-platform-stack")," repository."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Env variable"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_SHARED_MOUNT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Shared mount path on every cluster's node"),(0,n.kt)("td",{parentName:"tr",align:"left"},"~/linto_shared_mount/")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_USE_SSL"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable, disable SSL"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true, false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_USE_ACME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable, disable Let's encrypt"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true, false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_ACME_EMAIL"),(0,n.kt)("td",{parentName:"tr",align:"left"},"ACME user email"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"mailto:user@linagora.com"},"user@linagora.com"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_DOMAIN"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Deployed domain of the stack"),(0,n.kt)("td",{parentName:"tr",align:"left"},"dev.linto.local")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_HTTP_USE_AUTH"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable, disable Basic HTTP protection on some critical routes"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true, false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_HTTP_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The HTTP basic auth user"),(0,n.kt)("td",{parentName:"tr",align:"left"},"user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_HTTP_PASSWORD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The HTTP basic auth password you wanna use"),(0,n.kt)("td",{parentName:"tr",align:"left"},"password")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_IMAGE_TAG"),(0,n.kt)("td",{parentName:"tr",align:"left"},"You might use latest or latest-unstable images from our Docker Hub"),(0,n.kt)("td",{parentName:"tr",align:"left"},"latest / latest-unstable")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Node JS APplication")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"TZ"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Time-zone value"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Europe/Paris")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_ADMIN_HTTP_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Leave it 80 unless you want some tweaking"),(0,n.kt)("td",{parentName:"tr",align:"left"},"80")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_ADMIN_API_WHITELIST_DOMAINS"),(0,n.kt)("td",{parentName:"tr",align:"left"},"CORS auhtorized domains list (separator ','), shall match your LINTO_STACK_DOMAIN at least"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"http://dev.linto.local,http://my-domain.coml"},"http://dev.linto.local,http://my-domain.coml"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Redis session store for webapps")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_REDIS_SESSION_SERVICE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Redis store service host/url"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-platform-stack-redis")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_REDIS_SESSION_SERVICE_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Redis store service port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"6379")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"MQTT Broker for LinTO clients")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_HOST"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT broker host"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-mqtt-broker")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT broker port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"1883")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_USE_LOGIN"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable/Disable MQTT broker authentication"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true,false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_DEFAULT_HW_SCOPE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT broker scope for static linto devices, any string"),(0,n.kt)("td",{parentName:"tr",align:"left"},"blk")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT broker user"),(0,n.kt)("td",{parentName:"tr",align:"left"},"user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_PASSWORD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT broker password"),(0,n.kt)("td",{parentName:"tr",align:"left"},"password")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_KEEP_ALIVE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"TCP keep alive in seconds"),(0,n.kt)("td",{parentName:"tr",align:"left"},"60")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_OVER_WS"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MQTT accesible over websockets or secure ws"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true, false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MQTT_OVER_WS_ENDPOINT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"mqtt over ws/wss endpoint"),(0,n.kt)("td",{parentName:"tr",align:"left"},"/mqtt")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Database")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_SERVICE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service host/url"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-platform-mongo")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"27017")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_DBNAME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service database name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-stack")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_USE_LOGIN"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable/Disable MongoDb service authentication"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true,false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service username"),(0,n.kt)("td",{parentName:"tr",align:"left"},"user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_PASSWORD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service username"),(0,n.kt)("td",{parentName:"tr",align:"left"},"password")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_VOLUME_NAME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Volume name for mongodb"),(0,n.kt)("td",{parentName:"tr",align:"left"},"mongodb-admin")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_TARGET_VERSION"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mongodb version for migration backup"),(0,n.kt)("td",{parentName:"tr",align:"left"},"1,2,3")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Business Logic Server")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_BLS_SERVICE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"BLS service host/url"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-platform-bls")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_BLS_USE_LOGIN"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable/disable BLS authentication"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_BLS_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"BLS service username"),(0,n.kt)("td",{parentName:"tr",align:"left"},"username")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_BLS_PASSWORD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"BLS service password"),(0,n.kt)("td",{parentName:"tr",align:"left"},"password")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_BLS_SERVICE_UI_PATH"),(0,n.kt)("td",{parentName:"tr",align:"left"},"User interface path"),(0,n.kt)("td",{parentName:"tr",align:"left"},"/redui")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Tock NLU")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_SERVICE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tock service host/url"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-tock-nlu-web")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_NLP_API"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tock NLP service host/url"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-tock-nlp-api")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_MONGODB_TOCK_VOLUME_NAME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mongodb volume name for tock service"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-tock-mongo")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_SERVICE_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tock service port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"8080")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_SERVICE_UI_PATH"),(0,n.kt)("td",{parentName:"tr",align:"left"},"TOck user interface path"),(0,n.kt)("td",{parentName:"tr",align:"left"},"/tock")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_ENV"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Running environement type(more log on dev)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"dev,prod")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tock user"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"mailto:tock@linto.ai"},"tock@linto.ai"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_PASSWORD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tock user password"),(0,n.kt)("td",{parentName:"tr",align:"left"},"password")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_TOCK_TAG"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Docker image version"),(0,n.kt)("td",{parentName:"tr",align:"left"},"19.9.3")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"STT Service manager")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_SERVICE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"STT-manager service host"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-platform-stt-service-manager")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_INGRESS_CONTROLLER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Controller ingress used"),(0,n.kt)("td",{parentName:"tr",align:"left"},"traefik")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MONGODB_HOST"),(0,n.kt)("td",{parentName:"tr",align:"left"},"STT-manager mongodb host"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-platform-stt-service-manager-mongodb")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MONGODB_PORT"),(0,n.kt)("td",{parentName:"tr",align:"left"},"STT-manager mongodb port"),(0,n.kt)("td",{parentName:"tr",align:"left"},"27017")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MONGODB_DBNAME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service database name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linSTTAdmin")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MONGODB_REQUIRE_LOGIN"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable/Disable MongoDb service authentication"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true,false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MONGODB_USER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service username"),(0,n.kt)("td",{parentName:"tr",align:"left"},"user")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_MOGODB_PSWD"),(0,n.kt)("td",{parentName:"tr",align:"left"},"MongoDb service password user"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_STT_SERVICE_MANAGER_VOLUME_NAME"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Mongodb volume name for STT-manager service"),(0,n.kt)("td",{parentName:"tr",align:"left"},"stt-service-manager")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"LinSTT Service")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_LINSTT_IMAGE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Docker image to use"),(0,n.kt)("td",{parentName:"tr",align:"left"},"lintoai/linto-platform-stt-standalone-worker")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_LINSTT_NETWORK"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Docker network to connect"),(0,n.kt)("td",{parentName:"tr",align:"left"},"linto-net")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_LINSTT_PREFIX"),(0,n.kt)("td",{parentName:"tr",align:"left"},"="),(0,n.kt)("td",{parentName:"tr",align:"left"},"stt")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("strong",{parentName:"td"},"Overwatch")),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_LOGS_MONGODB"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable/Disable mongodb logs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true,false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_BASE_PATH"),(0,n.kt)("td",{parentName:"tr",align:"left"},"API rest path location"),(0,n.kt)("td",{parentName:"tr",align:"left"},"/overwatch")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_AUTH_TYPE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Enable auth type module"),(0,n.kt)("td",{parentName:"tr",align:"left"},"basic,ldap,passthrough,...")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_AUTH_LDAP_SERVER_URL"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Host service LDAP"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_AUTH_LDAP_SERVER_SEARCH_BASE"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Ldap base search"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"LINTO_STACK_OVERWATCH_AUTH_LDAP_SERVER_SEARCH_FILTER"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Ldap filter search"),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("h2",{id:"final-words"},"Final words"),(0,n.kt)("p",null,"To adapt the following tools to your needs, when you want let's say to deploy some service \"\xe0 la carte\", you might check what's going on in the ",(0,n.kt)("inlineCode",{parentName:"p"},"stack-files")," folder of this repo (YML sources for the Docker Services)."))}m.isMDXComponent=!0}}]);