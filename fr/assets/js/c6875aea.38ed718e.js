"use strict";(self.webpackChunknewdoc=self.webpackChunknewdoc||[]).push([[7199],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=a,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return t?o.createElement(g,i(i({ref:n},c),{},{components:t})):o.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(7294),a=t(6010);const r="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var o=t(7462),a=t(7294),r=t(6010),i=t(2389),s=t(7392),l=t(7094),d=t(2466);const c="tabList__CuJ",u="tabItem_LNqP";function p(e){var n;const{lazy:t,block:i,defaultValue:p,values:m,groupId:g,className:h}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??k.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),b=(0,s.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===p?p:p??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,l.U)(),[T,w]=(0,a.useState)(N),x=[],{blockElementScrollPositionUntilNextRender:O}=(0,d.o5)();if(null!=g){const e=v[g];null!=e&&e!==T&&f.some((n=>n.value===e))&&w(e)}const E=e=>{const n=e.currentTarget,t=x.indexOf(n),o=f[t].value;o!==T&&(O(n),w(o),null!=g&&y(g,String(o)))},S=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>x.push(e),onKeyDown:S,onFocus:E,onClick:E},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,a.cloneElement)(k.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function m(e){const n=(0,i.Z)();return a.createElement(p,(0,o.Z)({key:String(n)},e))}},1073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var o=t(7462),a=(t(7294),t(3905)),r=t(5488),i=t(5162);const s={},l="Node-RED LinTO Framework",d={unversionedId:"developpers/agent/skills/components",id:"developpers/agent/skills/components",title:"Node-RED LinTO Framework",description:"LinTO-Components repository contains the framework code for building LinTO Bricks that would plug into Node-Red. It enables its users to develop LinTO compatible skills, leveraging a set of base Node JS classes inside their own code.",source:"@site/docs/developpers/agent/skills/components.md",sourceDirName:"developpers/agent/skills",slug:"/developpers/agent/skills/components",permalink:"/fr/docs/developpers/agent/skills/components",draft:!1,editUrl:"https://github.com/linto-ai/documentation-website/tree/source/docs/developpers/agent/skills/components.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"Deploy a skill",permalink:"/fr/docs/developpers/agent/skills/devguide/install_my_skills"},next:{title:"Published skills and other Node-RED nodes",permalink:"/fr/docs/developpers/agent/skills/list"}},c={},u=[{value:"Installation",id:"installation",level:2},{value:"Nodes",id:"nodes",level:2},{value:"Node types :",id:"node-types-",level:3},{value:"Payload toolboxes",id:"payload-toolboxes",level:2},{value:"Components specs and usage :",id:"components-specs-and-usage-",level:3},{value:"Methods",id:"methods",level:4},{value:"Methods",id:"methods-1",level:4},{value:"Methods",id:"methods-2",level:4},{value:"Methods",id:"methods-3",level:4},{value:"Methods",id:"methods-4",level:4},{value:"Methods",id:"methods-5",level:4},{value:"Methods",id:"methods-6",level:4},{value:"Connect",id:"connect",level:2},{value:"Connect specs and usage :",id:"connect-specs-and-usage-",level:3},{value:"Methods",id:"methods-7",level:4},{value:"Methods",id:"methods-8",level:4},{value:"Exceptions",id:"exceptions",level:2}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-red-linto-framework"},"Node-RED LinTO Framework"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/linto-ai/linto-skills-components"},"LinTO-Components")," repository contains the framework code for building LinTO Bricks that would plug into Node-Red. It enables its users to develop ",(0,a.kt)("strong",{parentName:"p"},"LinTO compatible skills"),", leveraging a set of base Node JS ",(0,a.kt)("strong",{parentName:"p"},"classes")," inside their own code."),(0,a.kt)("p",null,"Here's a list of the main types of components"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Nodes")," : Default classes for a desired type of Node-red node (CoreNode, DictionaryNode, SkillNode...)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Components")," : Utility toolbox for LinTO (classes, inheritance...)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Connect")," : Defferents means of feeding LinTO Node-Red nodes with Events, Wires..."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Exception")," : Exceptions related to linto-components")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This documentation is pretty rough, you might dig in the code of provided ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/linto-ai/linto-skills-template"},"LinTO-skills, templates and examples")," to understand how it works")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Eventhough this NPM module can be installed in any Node-Red instance with ",(0,a.kt)("inlineCode",{parentName:"p"},"npm i @linto-ai/linto-components -s"),", you're much rather willing to install a complete LinTO platform server in order to use the provided features.")),(0,a.kt)("h2",{id:"nodes"},"Nodes"),(0,a.kt)("p",null,"The component ",(0,a.kt)("strong",{parentName:"p"},"Nodes")," regroups specific nodes for LinTO, those will be available in the LinTO-Admin Node-Red interface as palette drag'n drop bricks."),(0,a.kt)("p",null,"Here's a list of all type of Node-red nodes offered by the ",(0,a.kt)("strong",{parentName:"p"},"linto-components")," package :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Node"),(0,a.kt)("li",{parentName:"ul"},"Core-Node"),(0,a.kt)("li",{parentName:"ul"},"Core-Event-Node"),(0,a.kt)("li",{parentName:"ul"},"Dictionary-Node"),(0,a.kt)("li",{parentName:"ul"},"Skill-Node")),(0,a.kt)("h3",{id:"node-types-"},"Node types :"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"LinTO Node",label:"LinTO Node",default:!0,mdxType:"TabItem"},"LinTO-Node is the classic Node-RED's style drag'n dropable node, loaded for LinTO needs.",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoNode = require('linto-components').nodes.lintoNode\nclass  MyLintoNode  extends  LintoNode {\n    constructor(RED, node, config) {\n        super(node, config)\n        ...\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"LinTO Core Node",label:"LinTO Core Node",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoCoreNode = require('linto-components').nodes.lintoCoreNode\nclass  MyLintoCoreNode  extends  LintoSkillNode {\n    constructor(RED, node, config) {\n        super(node, config)\n        ...\n        this.init()\n    }\n\n    async  init(){\n        let  serviceFunc = await  this.loadModule(`${**dirname}/api/${this.config.node.api}`) // Not require\n        this.wireNode.onMessageSend(this, serviceFunc)\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"LinTO Core Event Node",label:"LinTO Core Event Node",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoCoreEventNode = require('linto-components').nodes.lintoCoreEventNode\nclass  MyLintoCoreNode  extends  LintoSkillNode {\n    constructor(RED, node, config) {\n        super(RED, node, config)\n        ...\n        this.init()\n    }\n\n    // In node function skill\n    this.notifyEventError('mqtt-Topic', {text : 'LinTo text'}, { message: err.message, code: 500 })\n}\n"))),(0,a.kt)(i.Z,{value:"LinTO Connect Core Node",label:"LinTO Connect Core Node",mdxType:"TabItem"},(0,a.kt)("p",null,"Linto-Core-Connect nodes are extended from lintoCoreNode, they load the component mqtt by default. The ConnectCoreNode destroy their mqtt connection when the node is remove."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoConnectCoreNode = require('linto-components').nodes.lintoConnectCoreNode\nclass  MyLinTODictionary  extends  LintoConnectCoreNode {\n    constructor(RED, node, config) {\n        super(node, config)\n        ...\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"LinTO Dictionary Core Node",label:"LinTO Dictionary Core Node",mdxType:"TabItem"},(0,a.kt)("p",null,"Linto-Core-Dictionary nodes are extended from lintoCoreNode, they add one check on the required data for a dictionary"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoDictionaryCoreNode = require('linto-components').nodes.lintoDictionaryCoreNode\nclass  MyLinTODictionary  extends  LintoDictionaryCoreNode {\n    constructor(RED, node, config) {\n        super(RED, node, config) // will check config.name and config.data are not empty\n        ...\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"LinTO Skill Node",label:"LinTO Skill Node",mdxType:"TabItem"},(0,a.kt)("p",null,"Each new skill-node will enable LinTO to proceed a new action."),(0,a.kt)("p",null,"The skill node manage different autoload function\nThe node also load by default ",(0,a.kt)("inlineCode",{parentName:"p"},"Wire-Event")," component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const  LintoSkillNode = require('../linto-components').nodes.lintoSkillNode\nclass  MyLintoSkill  extends  LintoSkillNode {\n    constructor(RED, node, config) {\n        super(RED, node, config, dirname)\n        ...\n        this.init()\n    }\n\n    async  init() {\n        await  this.configure() // Allow folder controllers, events and data to be loaded\n    }\n}\n")))),(0,a.kt)("h2",{id:"payload-toolboxes"},"Payload toolboxes"),(0,a.kt)("p",null,"Those are generic utility tools to use within your custom skills and work with specific ",(0,a.kt)("strong",{parentName:"p"},"LinTO Typed payloads into Node-Red")),(0,a.kt)("h3",{id:"components-specs-and-usage-"},"Components specs and usage :"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Payload Action",label:"Payload Action",mdxType:"TabItem"},(0,a.kt)("p",null,"Toolbox that provide utility function to read the payload generated by the node linto-red-event-emitter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { payloadAction } = require('linto-components').components\n...\n//In constructor class\nthis.payloadAction = payloadAction\n")),(0,a.kt)("h4",{id:"methods"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"extractEntityFromPrefix\nSearch the first entity in the payload matching the searched prefix\n\nArguments :\n\n{Object} payload : input message\n{String} searchedPrefix : searched prefix\n{Object} : Return, extracted entity from the payload, else undefined\n\nextractEntityFromName\nSearch the first entity in the payload matching the searched name\n\nArguments :\n\n{Object} payload : input message\n{String} searchedName : searched name entity\n{Object} : Return, extracted entity from the payload, else undefined\n\ncheckEntitiesRequire\nCheck if all required entities are provided by the payload\n\nArguments :\n\n{Object} payload : input message\n{Array{string}} requireEntities : required entities\n{Boolean} : Return, true if required entities are found in the payload, else false\n\ncheckEntityRequire\nCheck if one entity required is provided by the payload\n\nArguments :\n\n{Object} payload : input message\n{Array{string}} searchedPrefix : required prefix of entities\n{Boolean} : Return, true if one entity require are find, else false\n"))),(0,a.kt)(i.Z,{value:"Red Action",label:"Red Action",mdxType:"TabItem"},(0,a.kt)("p",null,"Toolbox which provides functionality to get information about a workflow"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { redAction } = require('linto-components').components\n...\n//In constructor class\nthis.redAction = redAction\n")),(0,a.kt)("h4",{id:"methods-1"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"getNodeFromId\nFind a node based on the searched id\n\nArguments :\n\n{String} flowId : searched flow id\n{String} nodeId : searched node id\n{Object} : Return, node found, else undefined\n\ngetFirstNodeFromName\nFind the first node based on the searched name\n\nArguments :\n\n{String} flowId : searched flow id\n{String} nodeName : searched node name\n{Object} : Return, node found, else undefined\n\ngetNodesFromName\nFind all node with the matching name\n\nArguments :\n\n{String} flowId : searched flow id\n{String} nodeName : searched nodes name\n{Array{Object}} : Return, array of node matching name, else an empty array\n\ngetLintoSnFromFlow\nFind LinTO serial number\n\nArguments :\n\n{String} flowId : searched flow id\n{Array{Object}} : Return, array of LinTO serial number, else an empty array\n\ngetLintoSnFromFlow\nGet all node from the flow\n\nArguments :\n\n{String} flowId : searched flow id\n{Array{Object}} : Return an array containing all node from the flow\n"))),(0,a.kt)(i.Z,{value:"Request",label:"Request",mdxType:"TabItem"},(0,a.kt)("p",null,"HTTP APIs consumption"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { request } = require('linto-components').components\n...\n//In constructor class\nthis.request = request\n")),(0,a.kt)("h4",{id:"methods-2"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"get\nMake a GET request\n\nArguments :\n\n{String} url : Host to call\n{String} token | optional: Authentication token (headers.authorization)\n{Promise} : Return a promise to handle\n\npost\nMake a POST request\n\nArguments :\n\n{String} url : Host to call\n{Object} form: Request form data (json)\n{String} token | optional: Authentication token (headers.authorization)\n{Promise} : Return a promise to handle\n"))),(0,a.kt)(i.Z,{value:"Template",label:"Template",mdxType:"TabItem"},(0,a.kt)("p",null,"Template HTML for different node type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { template } = require('linto-components').components\n...\n//In constructor class\nthis.template = template\n")),(0,a.kt)("h4",{id:"methods-3"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"settupSkillTemplate\nGenerate template format for a skill\n\nArguments :\n\n{String} paletteName : Node palette name\n{Object} : Return, Json format for the HTML template node settings\n"))),(0,a.kt)(i.Z,{value:"Terminal Out",label:"Terminal Out",mdxType:"TabItem"},(0,a.kt)("p",null,"Exit node that sends back MQTT payloads to requesting client (Raspberry / Android configured as Device)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { terminalOut } = require('linto-components').components\n...\n//In constructor class\nthis.terminalOut = terminalOut\n")),(0,a.kt)("h4",{id:"methods-4"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"toSay\nGenerate output for LinTO say mode\n\nArguments :\n\n{String} toSay : Text for linto to \u201csay\u201d\n{Object} : Return a readable output for linto say mode\n\ntoAsk\nGenerate an output for LinTO ask mode\n\nArguments :\n\n{String} toSay : Text for LinTO to \u201cask\u201d\n{Objet} data : Data to keep for the next LinTO command\n{Object} : Return a readable output for LinTO ask mode\n\ntoUi\n\nDeveloppement staled on this | To send things to display, needs to get intrepreted by LinTO clients\n"))),(0,a.kt)(i.Z,{value:"Wire Event",label:"Wire Event",mdxType:"TabItem"},(0,a.kt)("p",null,"Handle event with RED.events and provide utility function to work with the RED event emitter.\nNode-red LinTO bricks usualy uses this pattern to communicate instead of Node-Red explicit wires"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { wireEvent } = require('linto-components').components\n...\n//In constructor class\nthis.wireEvent = wireEvent.init(RED)\n")),(0,a.kt)("h4",{id:"methods-5"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"init\nInitialize RED.events for wire-event components\n\nArguments :\n\n{Object} RED : RED object from node\n{Object} : Return, initialized wire-event setup (this)\n\ngetBaseName\nGet the base name of wire-event using to create events\n\n{String} : Return, event base name\n\nsubscribe\nCreate an event (eventBaseName-flowId-eventName)\n\nArguments :\n\n{String} flowId : Node flow id\n{String} eventName : Event name\n{Function} handler : Function to trigger on event\nsubscribeWithStatus\nCreate an event (eventBaseName-flowId-eventName). Node will showcase a status error or success.\n\nArguments : Has to be called with .call(this) in a node class\n\n{String} flowId : Node flow id\n{String} eventName : Event name\n{Function} handler : Function to trigger on event\nnotify\nEmit an RED.events.\n\nArguments : No args can be given\n\n{String} eventName : Name of the event to emit\n{Object} args_1 : Any argument to emit\n{Object} args_N : Any argument to emit\nunsubscribe\nRemove all listeners related to the event\n\nArguments :\n\n{String} eventName : Event name to delete\nisEventFlow\nVerify if the event has been created\n\nArguments :\n\n{String} eventName : Event name to verify\n{Boolean} : Return, true if the event exist , else false\n"))),(0,a.kt)(i.Z,{value:"Wire Node",label:"Wire Node",mdxType:"TabItem"},(0,a.kt)("p",null,"Some Node-red nodes intended for LinTO might benefit from an explicit Node-Red like linl. This Handles wires connectivity and provides utility function to work with it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { wireNode } = require('linto-components').components\n...\n//In constructor class\nthis.wireNode = wireNode.init(RED)\n")),(0,a.kt)("h4",{id:"methods-6"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"onMessageSend\nSetup a function when a node message is received and sends result to the next wired node\n\nArguments :\n\n{Object} registerNode : Node to execute an action on message\n{Object} handler : Function to trigger on message\n{String} successMsg | optional : Message to print on the node\nonMessage\nSetup a function when a node message is received.\n\nArguments :\n\n{Object} registerNode : Node to execute an action on message\n{Object} handler : Function to trigger on message\n{String} successMsg | optional : Message to print on the node\nnodeSend\nMessage send to the next wired node\n\nArguments :\n\n{Object} registerNode : Node that send data\n{Object} payload : Payload to send\n")))),(0,a.kt)("h2",{id:"connect"},"Connect"),(0,a.kt)("p",null,"Component allowing different external communication"),(0,a.kt)("h3",{id:"connect-specs-and-usage-"},"Connect specs and usage :"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"MQTT",label:"MQTT",mdxType:"TabItem"},(0,a.kt)("p",null,"Toolbox that handle different MQTT functionalities"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { mqtt } = require('linto-components').connect\n...\n// In constructor class\nthis.mqtt = new  mqtt(this)\n...\n// After component initialisation, mqtt config can be found if the flow has setup a linto-config node\nlet  mqttConfig = this.getFlowConfig('confMqtt')\n")),(0,a.kt)("h4",{id:"methods-7"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"connect\nConnect to the specified host:port\n\nArguments :\n\n{Object} flowMqttConfig : MQTT information (host, port, user, password)\n{Promise} : Return, mqtt client connected.\n\nonMessage\nTrigger the handled function on the desired topic when a mqtt message has been receive\n\nArguments :\n\n{Object} handler : Function to trigger on mqtt message\n{String} topicFilter : Topic to trigger on mqtt message\npublish\nPublish a message to a desired mqtt topic\n\nArguments :\n\n{String} topic : Topic to publish\n{Object} payload : Json payload to send\nsubscribeToLinto\nSubscribe to a LinTO topic\n\nArguments :\n\n{String} topicScope : Scope to subscribe\n{Array{string}} ids : List of ids to subscribe (can be + for all LinTO)\n{String} topicActi\n"))),(0,a.kt)(i.Z,{value:"Authenticated Token",label:"Authenticated Token",mdxType:"TabItem"},(0,a.kt)("p",null,"Authentication toolbox enable user check token"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { authToken } = require('@linto-ai/linto-components').connect\n...\n// In constructor class\nthis.authToken = authToken.init(authServerService)\n...\n// After component initialisation\nlet response = await this.authToken.checkToken(auth_token)\n")),(0,a.kt)("h4",{id:"methods-8"},"Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"init\nSettings default authentication host\n\nArguments :\n\n{String} host : Token validator service path\ncheckToken\nVerify the user token\n\nArguments :\n\n{String} token : User token to be validate\n{Promise} : Return, request response.\n")))),(0,a.kt)("h2",{id:"exceptions"},"Exceptions"),(0,a.kt)(r.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Connect",label:"Connect",mdxType:"TabItem"},(0,a.kt)("p",null,"Exception raised by Connect component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { HostUndefined, TopicScopeUndefined, WrongFormat } = require('linto-components').exception.connectException\n...\nthrow  new  HostUndefined(exceptionMessage)\nthrow  new  TopicScopeUndefined(exceptionMessage)\nthrow  new  WrongFormat(exceptionMessage)\n"))),(0,a.kt)(i.Z,{value:"Node",label:"Node",mdxType:"TabItem"},(0,a.kt)("p",null,"Exception raised by Node-RED LinTO nodes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { InitSkillException, AutoLoadException, UnknownLanguageException } = require('linto-components').exception.nodeException\n...\nthrow  new  InitSkillException(exceptionMessage)\nthrow  new  AutoLoadException(exceptionMessage)\nthrow  new  UnknownLanguageException(exceptionMessage)\n"))),(0,a.kt)(i.Z,{value:"Terminal",label:"Terminal",mdxType:"TabItem"},(0,a.kt)("p",null,"Exception raised by linto-output issues"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { ToAskTerminalException, ToSayTerminalException, ToUiTerminalException } = require('linto-components').exception.terminalException\n...\nthrow  new  ToAskTerminalException(exceptionMessage)\nthrow  new  ToSayTerminalException(exceptionMessage)\nthrow  new  ToUiTerminalException(exceptionMessage)\n"))),(0,a.kt)(i.Z,{value:"Wired",label:"Wired",mdxType:"TabItem"},(0,a.kt)("p",null,"Exception raised by wired nodes issues"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { WireEventHandlerException } = require('linto-components').exception.wireException\n...\nthrow  new  WireEventHandlerException(exceptionMessage)\n")))),(0,a.kt)("p",null,"Salut"))}m.isMDXComponent=!0}}]);